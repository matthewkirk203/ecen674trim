// Generated by gencpp from file trim/ComputeTrimResponse.msg
// DO NOT EDIT!


#ifndef TRIM_MESSAGE_COMPUTETRIMRESPONSE_H
#define TRIM_MESSAGE_COMPUTETRIMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trim
{
template <class ContainerAllocator>
struct ComputeTrimResponse_
{
  typedef ComputeTrimResponse_<ContainerAllocator> Type;

  ComputeTrimResponse_()
    : x_trim()
    , u_trim()  {
      x_trim.assign(0.0);

      u_trim.assign(0.0);
  }
  ComputeTrimResponse_(const ContainerAllocator& _alloc)
    : x_trim()
    , u_trim()  {
      x_trim.assign(0.0);

      u_trim.assign(0.0);
  }



   typedef boost::array<double, 12>  _x_trim_type;
  _x_trim_type x_trim;

   typedef boost::array<double, 4>  _u_trim_type;
  _u_trim_type u_trim;




  typedef boost::shared_ptr< ::trim::ComputeTrimResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trim::ComputeTrimResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ComputeTrimResponse_

typedef ::trim::ComputeTrimResponse_<std::allocator<void> > ComputeTrimResponse;

typedef boost::shared_ptr< ::trim::ComputeTrimResponse > ComputeTrimResponsePtr;
typedef boost::shared_ptr< ::trim::ComputeTrimResponse const> ComputeTrimResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trim::ComputeTrimResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trim::ComputeTrimResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace trim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::trim::ComputeTrimResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trim::ComputeTrimResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trim::ComputeTrimResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trim::ComputeTrimResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trim::ComputeTrimResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trim::ComputeTrimResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trim::ComputeTrimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af12a440a2b1f801af6479f58ba804ba";
  }

  static const char* value(const ::trim::ComputeTrimResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf12a440a2b1f801ULL;
  static const uint64_t static_value2 = 0xaf6479f58ba804baULL;
};

template<class ContainerAllocator>
struct DataType< ::trim::ComputeTrimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trim/ComputeTrimResponse";
  }

  static const char* value(const ::trim::ComputeTrimResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trim::ComputeTrimResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[12] x_trim\n\
float64[4] u_trim\n\
";
  }

  static const char* value(const ::trim::ComputeTrimResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trim::ComputeTrimResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_trim);
      stream.next(m.u_trim);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ComputeTrimResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trim::ComputeTrimResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trim::ComputeTrimResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_trim[]" << std::endl;
    for (size_t i = 0; i < v.x_trim.size(); ++i)
    {
      s << indent << "  x_trim[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_trim[i]);
    }
    s << indent << "u_trim[]" << std::endl;
    for (size_t i = 0; i < v.u_trim.size(); ++i)
    {
      s << indent << "  u_trim[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.u_trim[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIM_MESSAGE_COMPUTETRIMRESPONSE_H
