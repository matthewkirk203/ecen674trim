import numpy as np
from numpy import linalg
import Param as P
from scipy.optimize import leastsq


def getLiftModelCoeff(alpha): 
    C_L =  (1-sigma)*(P.C_L_0 + P.C_L_alpha*alpha) + \
    sigma*(2*np.sign(alpha)*np.sin(alpha)**2*np.cos(alpha))
    return C_L

def getDragModelCoeff(alpha): # I have verified this function
    AR = P.b**2/P.S
    C_D =P.C_D_p + (P.C_L_0 + P.C_L_alpha*alpha)**2/(np.pi*P.e*AR)
    return C_D


def getLiftCoeff(alpha): 

	
    sigma = getSigma   # Compute sigma    
    C_L = getLiftModelCoeff(alpha) # Compute Lift model Coeff     
    C_D = getDragModelCoeff(alpha) # Compute drag model Coeff

    C_X =           -C_D*np.cos(alpha)  +          C_L*np.sin(alpha)
    C_X_q =         -P.C_D_q*np.cos(alpha) +            P.C_L_q*np.sin(alpha)
    C_X_delta_e =   -P.C_D_delta_e*np.cos(alpha) +      P.C_L_delta_e*np.sin(alpha)
    C_Z =           -C_D*np.sin(alpha) -           C_L*np.cos(alpha)
    C_Z_q =         -P.C_D_q*np.sin(alpha)-             P.C_L_q*np.cos(alpha)
    C_Z_delta_e =   -P.C_D_delta_e*np.sin(alpha) -      P.C_L_delta_e*np.cos(alpha)

    return C_X, C_X_q, C_X_delta_e, C_Z, C_Z_q, C_Z_delta_e

def getBodyFrameVelocities(alpha, beta,Va): 
    u = Va*np.cos(alpha)*np.cos(beta)
    v = Va*np.sin(beta)
    w = Va*np.sin(alpha)*np.cos(beta)
    return u, v, w

def getPitchAngle(alpha,gamma):                  
    theta = alpha + gamma
    return theta

def getAngularRates(phi,theta,Va,R):                 

    p = -Va/R*np.sin(theta)
    q = Va/R*np.sin(phi)*np.cos(theta)
    r = Va/R*np.cos(phi)*np.cos(theta)
    return p,q,r



def getElevator(alpha,p,q,r,Va): 
    # The code is broken down into several steps to increase readability
    temp1 = (P.Jxz*(p**2 - r**2) + (P.Jx - P.Jz)*p*r)/(1/2*P.rho*Va**2*P.c*P.S)
    temp2 = temp1 - P.C_m_0 - P.C_m_alpha*alpha - P.C_m_q*(P.c*q/(2*Va))

    delta_e = temp2/P.C_m_delta_e
    return delta_e

def getThrottle(u,v,w,p,q,r,Va,C_X,C_X_q,C_X_delta_e): 
    # The code is broken down into several steps to increase readability
    temp1 = 2*P.m*(-r*v + q*w + P.g*np.sin(theta))
    temp2 = -P.rho*(Va)**2*P.S*(C_X + C_X_q*P.c*q/(2*Va) + C_X_delta_e*delta_e)
    temp3 = (temp1 + temp2)/(P.rho*P.Sprop*P.Cprop*P.kmotor**2)
    temp4 = Va**2/P.kmotor**2
    delta_t = np.sqrt(temp3 + temp4)
    return delta_t

def getAileronAndRudder(p,q,r,Va,beta): 
    # The code is broken down into several steps to increase readability
    matrix1 = np.matrix([[P.C_p_delta_a, P.C_p_delta_r], [P.C_r_delta_a, P.C_r_delta_r]])
    matrix1 = linalg.inv(matrix1)


    temp1 = (-P.Gamma1*p*q + P.Gamma2*q*r)/(0.5*P.rho*Va**2*P.S*P.b)
    temp2 = P.C_p_p*(P.b*p/(2*Va))
    temp3 = P.C_p_r*(P.b*r/(2*Va))
    temp4 = (-P.Gamma7*p*q + P.Gamma1*q*r)/(0.5*P.rho*Va**2*P.S*P.b)
    temp5 = P.C_r_p*(P.b*p/(2*Va))
    temp6 = P.C_r_r*(P.b*r/(2*Va))

    matrix2 = np.matrix([[temp1 - P.C_p_0 - P.C_p_beta*beta - temp2 - temp3],
        [temp4 - P.C_r_0 - P.C_r_beta*beta - temp5 - temp6]])

    controls = matrix1*matrix2

    delta_a = controls[0,0]
    delta_r = controls[1,0]

    return delta_a, delta_r


def getSigma(alpha): 
    # The code is broken down into several steps to increase readability
    numerator = 1+np.exp(-P.M*(alpha-P.alpha_0))+np.exp(P.M*(alpha+P.alpha_0))
    den = ((1 + np.exp(-P.M*(alpha-P.alpha_0)))*(1+np.exp(P.M*(alpha+P.alpha_0))))
    sigma = numerator/den
    return sigma




def get_xtrim_utrim(alpha,beta,phi,Va,R,gamma):

	C_X, C_X_q, C_X_delta_e, C_Z, C_Z_q, C_Z_delta_e = getLiftCoeff(alpha)
	u,v,w = getBodyFrameVelocities(alpha, beta,Va)
	theta = getPitchAngle(alpha,gamma)
	p,q,r = getAngularRates(phi,theta,Va,R)
	delta_e = getElevator(alpha,p,q,r,Va)
	delta_t = getThrottle(u,v,w,p,q,r,Va,C_X,C_X_q,C_X_delta_e)
	delta_a, delta_r = getAileronAndRudder(p,q,r,Va,beta)

	return C_X, C_X_q, C_X_delta_e, C_Z, C_Z_q, C_Z_delta_e, 
	       u,v,w,theta,p,q,r,delta_e,delta_t,delta_a,delta_r




def get_fx(alpha,beta,phi,Va,R,gamma):
        

    C_X, C_X_q, C_X_delta_e, C_Z, C_Z_q, C_Z_delta_e, 
	       u,v,w,theta,p,q,r,delta_e,delta_t,delta_a,delta_r = get_xtrim_utrim(alpha,beta,phi,Va,R,gamma)




    cos_phi = np.cos(phi)
    cos_theta = np.cos(theta)
    cos_psi = np.cos(psi)
    sin_phi = np.sin(phi)
    sin_theta = np.sin(theta)
    sin_psi = np.sin(psi)

    temp1 = P.rho*Va**2*P.S/(2*P.m)

    pndot = (cos_theta*cos_psi*u + (sin_phi*sin_theta*cos_psi - 
        cos_phi*sin_psi)*v + (cos_phi*sin_theta*cos_psi + 
        sin_phi*sin_psi)*w)

    pedot = (cos_theta*sin_psi*u + (sin_phi*sin_theta*sin_psi +
        cos_phi*cos_psi)*v + (cos_phi*sin_theta*sin_psi - 
        sin_phi*cos_psi)*w)

    hdot = (u*sin_theta - v*sin_phi*cos_theta -
        w*cos_phi*cos_theta)

    udot = (r*v - q*w - P.g*sin_theta + 
        temp1*(C_X + C_X_q*P.c*q/(2*Va) + C_X_delta_e*delta_e) +
        P.rho*P.Sprop*P.Cprop/(2*P.m)*((P.kmotor*delta_t)**2 - Va**2))

    vdot = (p*w - r*u + P.g*cos_theta*sin_phi + temp1*
        (P.C_Y_0 + P.C_Y_beta*beta + P.C_Y_p*P.b*p/(2*Va) + P.C_Y_r*P.b*r/(2*Va) +
         P.C_Y_delta_a*delta_a + P.C_Y_delta_r*delta_r))

    wdot = (q*u - p*v + P.g*cos_theta*cos_phi + temp1*(C_Z + 
        C_Z_q*P.c*q/(2*Va) + C_Z_delta_e*delta_e))

    phidot = p + q*sin_phi*np.tan(theta) + r*cos_phi*np.tan(theta)

    thetadot = q*cos_phi - r*sin_phi

    psidot = q*sin_phi*(1/cos_theta) + r*cos_phi*(1/cos_theta)

    pdot = (P.Gamma1*p*q - P.Gamma2*q*r + (1/2)*P.rho*Va**2*P.S*P.b*
        (P.C_p_0 + P.C_p_beta*beta + P.C_p_p*P.b*p/(2*Va) + P.C_p_r*P.b*r/(2*Va) +
         P.C_p_delta_a*delta_a + P.C_p_delta_r*delta_r))

    qdot = (P.Gamma5*p*r - P.Gamma6*(p**2 - r**2) + P.rho*Va**2*P.S*P.c/(2*P.Jy)*
        (P.C_m_0 + P.C_m_alpha*alpha + P.C_m_q*P.c*q/(2*Va) + P.C_m_delta_e*delta_e))

    rdot = (P.Gamma7*p*q - P.Gamma1*q*r + (1/2)*P.rho*Va**2*P.S*P.b*
        (P.C_r_0 + P.C_r_beta*beta + P.C_r_p*P.b*p/(2*Va) + P.C_r_r*P.b*r/(2*Va) +
        P.C_r_delta_a*delta_a + P.C_r_delta_r*delta_r))

 

    return np.array([pndot,pedot,hdot,udot,vdot,wdot,phidot,thetadot,psidot,pdot,qdot,rdot])

def residuals(p,y,x):
    alpha,beta,phi = p
    Va, R, gamma = x
    fx = get_fx(alpha,beta,phi,Va,R,gamma)
    err = y - fx
    return err


def ComputeTrim(Va,R,gamma):
	xdotStar = np.matrix([[0],                                 # pn dot
                          [0],                                 # pe dot
                          [Va*np.sin(gamma)],        # h dot
                          [0],                                 # u dot
                          [0],                                 # v dot
                          [0],                                 # w dot
                          [0],                                 # phi dot
                          [0],                                 # theta dot
                          [Va/R*np.cos(gamma)], # psi dot
                          [0],                                 # p dot
                          [0],                                 # q dot
                          [0]])                                # r dot 

	p0 = [0,0,0]
	x = [Va,R,gamma]

    plsq = leastsq(residuals, p0, args=(y,x))

    return xtrim,utrim


if __name__ == "__main__": 
    # Va,gamma,R,alpha,beta,phi
    Va = float(35)
    gamma = float(15*np.pi/180)

    R = float(200)
  

   plsq = ComputeTrim(Va,R,gamma)
   print(plsq)
