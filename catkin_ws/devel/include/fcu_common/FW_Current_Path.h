// Generated by gencpp from file fcu_common/FW_Current_Path.msg
// DO NOT EDIT!


#ifndef FCU_COMMON_MESSAGE_FW_CURRENT_PATH_H
#define FCU_COMMON_MESSAGE_FW_CURRENT_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fcu_common
{
template <class ContainerAllocator>
struct FW_Current_Path_
{
  typedef FW_Current_Path_<ContainerAllocator> Type;

  FW_Current_Path_()
    : flag(false)
    , Va_d(0.0)
    , r()
    , q()
    , c()
    , rho(0.0)
    , lambda(0)  {
      r.assign(0.0);

      q.assign(0.0);

      c.assign(0.0);
  }
  FW_Current_Path_(const ContainerAllocator& _alloc)
    : flag(false)
    , Va_d(0.0)
    , r()
    , q()
    , c()
    , rho(0.0)
    , lambda(0)  {
      r.assign(0.0);

      q.assign(0.0);

      c.assign(0.0);
  }



   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef float _Va_d_type;
  _Va_d_type Va_d;

   typedef boost::array<float, 3>  _r_type;
  _r_type r;

   typedef boost::array<float, 3>  _q_type;
  _q_type q;

   typedef boost::array<float, 3>  _c_type;
  _c_type c;

   typedef float _rho_type;
  _rho_type rho;

   typedef int8_t _lambda_type;
  _lambda_type lambda;




  typedef boost::shared_ptr< ::fcu_common::FW_Current_Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fcu_common::FW_Current_Path_<ContainerAllocator> const> ConstPtr;

}; // struct FW_Current_Path_

typedef ::fcu_common::FW_Current_Path_<std::allocator<void> > FW_Current_Path;

typedef boost::shared_ptr< ::fcu_common::FW_Current_Path > FW_Current_PathPtr;
typedef boost::shared_ptr< ::fcu_common::FW_Current_Path const> FW_Current_PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fcu_common::FW_Current_Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fcu_common::FW_Current_Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fcu_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'fcu_common': ['/home/matt/ecen674trim/catkin_ws/src/fcu_common/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fcu_common::FW_Current_Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fcu_common::FW_Current_Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fcu_common::FW_Current_Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4af1751f6b464a5a3cb09551a027be48";
  }

  static const char* value(const ::fcu_common::FW_Current_Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4af1751f6b464a5aULL;
  static const uint64_t static_value2 = 0x3cb09551a027be48ULL;
};

template<class ContainerAllocator>
struct DataType< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fcu_common/FW_Current_Path";
  }

  static const char* value(const ::fcu_common::FW_Current_Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Current path output from the path manager, input to path follower\n\
\n\
# @warning Va_d have always to be valid, r and q need to be valid if flag is true, c rho and lambda need to be valid otherwise\n\
bool flag		# Inicates strait line or orbital path (true is line, false is orbit)\n\
float32 Va_d		# Desired airspeed (m/s)\n\
float32[3] r		# Vector to origin of straight line path (m)\n\
float32[3] q		# Unit vector, desired direction of travel for line path\n\
float32[3] c		# Center of orbital path (m)\n\
float32 rho		# Radius of orbital path (m)\n\
int8 lambda		# Direction of orbital path (clockwise is 1, counterclockwise is -1)\n\
";
  }

  static const char* value(const ::fcu_common::FW_Current_Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.Va_d);
      stream.next(m.r);
      stream.next(m.q);
      stream.next(m.c);
      stream.next(m.rho);
      stream.next(m.lambda);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FW_Current_Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fcu_common::FW_Current_Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fcu_common::FW_Current_Path_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "Va_d: ";
    Printer<float>::stream(s, indent + "  ", v.Va_d);
    s << indent << "r[]" << std::endl;
    for (size_t i = 0; i < v.r.size(); ++i)
    {
      s << indent << "  r[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r[i]);
    }
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "c[]" << std::endl;
    for (size_t i = 0; i < v.c.size(); ++i)
    {
      s << indent << "  c[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.c[i]);
    }
    s << indent << "rho: ";
    Printer<float>::stream(s, indent + "  ", v.rho);
    s << indent << "lambda: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lambda);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FCU_COMMON_MESSAGE_FW_CURRENT_PATH_H
